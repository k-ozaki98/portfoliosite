---
interface Props {
  currentPath?: string;
}

const { currentPath = '/' } = Astro.props;

const menuItems = [
  { label: 'はじめから', path: '/' },
  { label: 'ぷろふぃーる', path: '/profile' },
  { label: 'ぶろぐ', path: '/blog' },
  { label: 'じっせき', path: '/work' },
  { label: 'れんらく', path: '/contact' },
];
---

<header class="header dq-window">
  <div class="header__inner l-inner">
    <nav class="header__nav">
      <h1 class="header__logo">
        <a href="/">
          <img src="../../assets/images/common/logo.svg" alt="ロゴ" class="pixel-image">
        </a>
      </h1>
      <!-- PC・タブレット用メニュー -->
      <ul class="header__menu is-pc-tab">
        {menuItems.map((item) => (
          <li class="header__menu-item">
            <a 
              href={item.path} 
              class:list={[
                'header__menu-link',
                'sound-btn',
                { 'is-active': currentPath === item.path }
              ]}
            >
              <span class="dq-cursor">▶</span>
              {item.label}
            </a>
          </li>
        ))}
      </ul>

      <!-- スマートフォン用メニューボタン -->
      <div class="menu-trigger is-sp" aria-label="メニュー">
        <span></span>
        <span></span>
        <span></span>
      </div>
    </nav>
  </div>

  <!-- スマートフォン用ドラクエ風メニュー -->
  <div class="sp-menu">
    <div class="dq-command-window">
      <ul class="command-list">
        {menuItems.map((item) => (
          <li class="command-item">
            <a 
              href={item.path} 
              class:list={[
                'command-link',
                'sound-btn',
                { 'is-active': currentPath === item.path }
              ]}
            >
              <span class="dq-cursor">▶</span>
              {item.label}
            </a>
          </li>
        ))}
      </ul>
    </div>
  </div>
</header>

<style lang="scss">
	@import '../styles/vars.scss';
	@import '../styles/common.scss';
  .header {
    width: 100%;
    background: #000;
    font-family: "PixelMplus12", monospace;
    border-top: 4px solid #fff;
    border-bottom: 4px solid #fff;
    position: relative;
    
    // ドラクエ風の二重線装飾
    &::before,
    &::after {
      content: '';
      position: absolute;
      left: 0;
      width: 100%;
      height: 2px;
      background: #fff;
    }
    
    &::before {
      top: 2px;
    }
    
    &::after {
      bottom: 2px;
    }

    &__inner {
      width: 90%;
      margin: 0 auto;
    }

    &__nav {
      height: 6rem;
      display: flex;
      align-items: center;
      justify-content: space-between;

      @include max-screen($bp-sp) {
         height: 7rem;   
        }
    }

    &__logo {
      width: 10rem;

      @include max-screen($bp-sp) {
         width: 8rem; 
        }

			img {
				width: 100%;
				height: 100%;
			}
		}

    &__menu {
      display: flex;
      // gap: 3rem;
      list-style: none;
      padding: 0;
      margin: 0;
    }

    &__menu-item {
      position: relative;

      &:not(:last-child)::after {
        content: '';
        position: absolute;
        right: 0;
        top: 50%;
        transform: translateY(-50%);
        width: 2px;
        height: 70%;
        background: #fff;
      }
    }

    &__menu-link {
      display: inline-flex;
      align-items: center;
      padding: 0.5rem 3rem;
      text-decoration: none;
      color: #fff;
      font-size: 1.6rem;
      position: relative;
      transition: color 0.2s ease;
      position: relative;

      &:hover,
      &.is-active {
        color: #dcb434; // ドラクエの金色

        .dq-cursor {
          opacity: 1;
          transform: translateX(0) translateY(-50%);
        }
      }
    }
  }

  // ドラクエ風カーソル
  .dq-cursor {
    color: #dcb434;
    margin-right: 0.5rem;
    opacity: 0;
    transform: translateX(-10px) translateY(-50%);
    transition: all 0.2s ease;
    font-size: 1.2rem;
    position: absolute;
    top: 50%;
    left: 1.5rem;
  }

  @media (max-width: 768px) {
    .header {
      &__inner {
        width: 100%;
      }


      &__menu {
        gap: 1.5rem;
      }

      &__menu-item {
        &:not(:last-child)::after {
          right: -0.75rem;
        }
      }

      &__menu-link {
        font-size: 1.2rem;
      }
    }
  }



  /* ハンバーガーメニューボタン */
.menu-trigger {
  width: 4rem;
  height: 4rem;
  position: relative;
  background: #000;
  border: 2px solid #fff;
  cursor: pointer;
  z-index: 1000;
  display: flex;
  flex-direction: column;
  justify-content: space-around;
  border-radius: 5px;

  span {
      display: block;
      position: absolute;
      width: 70%;
      height: 2px;
      background-color: #fff;
      left: 50%;

      &:nth-child(1) { 
        top: 0; 
        transform: translate(-50%, 0.8rem);
      }
      &:nth-child(2) { 
        top: 50%; 
        transform: translate(-50%, -50%); 
      }
      &:nth-child(3) { 
        bottom: 0; 
        transform: translate(-50%, -0.8rem);
      }
    }

    &.is-active {
      span {
        &:nth-child(1) {
          transform: translate(-50%, 19px) rotate(45deg);
        }
        &:nth-child(2) {
          opacity: 0;
        }
        &:nth-child(3) {
          transform: translate(-50%, -19px) rotate(-45deg);
        }
      }
    }
  
}

/* スマートフォン用メニュー */
.sp-menu {
  position: fixed;
  top: 6rem; // ヘッダーの高さに合わせる
  left: 0;
  width: 100%;
  height: calc(100vh - 6rem); // ヘッダーの高さを引く
  background: rgba(0, 0, 0, 0.8);
  display: none;
  z-index: 999;

  &.is-active {
    display: block;
  }
}

/* ドラクエ風コマンドウィンドウ */
.dq-command-window {
  position: absolute; // absoluteからrelativeに変更
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 90%;
  max-width: 300px;
  background: #000;
  border: 4px solid #fff;
  padding: 1rem;
  box-shadow: 0 0 0 4px #000;
  
  &::before,
  &::after {
    content: '';
    position: absolute;
    width: 8px;
    height: 8px;
    background: #fff;
  }
  
  &::before { top: -6px; left: -6px; }
  &::after { bottom: -6px; right: -6px; }
}

/* コマンドリストのスタイル調整 */
.command-list {
  list-style: none;
  padding: 0;
  margin: 0;
}

.command-item {
  margin: 0;
  border-bottom: 1px solid rgba(255, 255, 255, 0.2);
  
  &:last-child {
    border-bottom: none;
  }
}

.command-link {
  display: block;
  padding: 1.5rem 3rem;
  color: #fff;
  text-decoration: none;
  position: relative;
  transition: color 0.2s ease;

  &:hover,
  &.is-active {
    color: #dcb434;
    background: rgba(255, 255, 255, 0.1);

    .dq-cursor {
      opacity: 1;
      transform: translateX(0) translateY(-50%);
    }
  }

  .dq-cursor {
    left: 1rem;
  }
}
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const menuTrigger = document.querySelector('.menu-trigger');
    const spMenu = document.querySelector('.sp-menu');
    const playSelect = () => {
      const audio = new Audio('/sounds/select.mp3');
      audio.volume = 0.3;
      audio.play();
    };

    menuTrigger?.addEventListener('click', () => {
      menuTrigger.classList.toggle('is-active');
      spMenu?.classList.toggle('is-active');
      playSelect();
    });

    // メニューリンクのクリック時にメニューを閉じる
    const menuLinks = document.querySelectorAll('.command-link');
    menuLinks.forEach(link => {
      link.addEventListener('click', () => {
        menuTrigger?.classList.remove('is-active');
        spMenu?.classList.remove('is-active');
        playSelect();
      });
    });
  });
</script>