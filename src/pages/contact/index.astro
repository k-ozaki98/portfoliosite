---
import Layout from "../../layouts/Layout.astro";
---

<Layout
  pageId="contact"
  title="そうだんする | Ozaki's Portfolio"
  description="お問い合わせフォーム"
>
  <main>
    <div class="dq-page">
      <div class="contact">
        <div class="contact-container dq-window">
          <h1 class="title">
            <span class="title-en">Contact</span>
            <span class="title-ja">そうだんする</span>
          </h1>
          <form
            id="contactForm"
            action="https://portfolio-688145.form.newt.so/v1/eHDsTsNsc"
            method="post"
            class="contact-form"
          >
            <div class="form-group">
              <span class="dq-cursor">▶</span>
              <label for="name" class="floating-label">なまえ</label>
              <input type="text" name="name" id="name" required placeholder="" />
              <span class="error-message" id="nameError"></span>
            </div>
            <div class="form-group">
              <span class="dq-cursor">▶</span>
              <label for="email" class="floating-label">めーる</label>
              <input type="email" name="email" id="email" required placeholder="" />
              <span class="error-message" id="emailError"></span>
            </div>
            <div class="form-group">
              <span class="dq-cursor">▶</span>
              <label for="message" class="floating-label">ないよう</label>
              <textarea id="message" name="message" rows="4" required placeholder=""></textarea>
              <div class="error-message" id="messageError"></div>
            </div>
            <input type="hidden" name="g-recaptcha-response" id="g-recaptcha-response">
            <button type="submit" class="submit-btn">
              <span class="dq-cursor">▶</span>
              そうしんする
            </button>
          </form>
        </div>
      </div>
    </div>
  </main>
</Layout>

<style>
/* ベースとなるページスタイル */
.dq-page {
  min-height: 100vh;
  /* background: #000066; */
  padding: 4rem 2rem;
  font-family: "PixelMplus12", monospace;
}

/* ドラクエ風ウィンドウ */
.dq-window {
  background: #000000;
  border: 4px solid #ffffff;
  box-shadow: 0 0 0 6px #000000;
  position: relative;
  margin: 8px;
}

.dq-window::before,
.dq-window::after {
  content: '';
  position: absolute;
  width: 12px;
  height: 12px;
  background: #ffffff;
}

.dq-window::before {
  top: -6px;
  left: -6px;
}

.dq-window::after {
  bottom: -6px;
  right: -6px;
}

/* コンテナスタイル */
.contact-container {
  max-width: 600px;
  margin: 50px auto;
  padding: 3rem;
  color: #ffffff;
}

/* タイトルスタイル */
.title {
  text-align: center;
  margin-bottom: 4rem;
}

.title-en {
  display: block;
  font-size: 4rem;
  color: #dcb434;
  text-shadow: 2px 2px #000000;
  margin-bottom: 0.5rem;
}

.title-ja {
  display: block;
  font-size: 2rem;
  color: #ffffff;
  font-weight: normal;
}

/* フォームスタイル */
.contact-form {
  display: flex;
  flex-direction: column;
  gap: 3rem;
}

/* フォームグループ */
.form-group {
  position: relative;
  border: 2px solid #ffffff;
  padding: 1.5rem;
  background: transparent;
}

.dq-cursor {
  position: absolute;
  left: -2rem;
  top: 50%;
  transform: translateY(-50%);
  color: #dcb434;
  opacity: 0;
  transition: opacity 0.3s ease;
}

.form-group:focus-within {
  border-color: #dcb434;
}

.form-group:focus-within .dq-cursor {
  opacity: 1;
}

.form-group:focus-within .floating-label {
  color: #dcb434;
}

/* 入力フィールド */
input,
textarea {
  width: 100%;
  background: transparent;
  border: none;
  color: #ffffff;
  font-size: 1.6rem;
  line-height: 1.5;
}

input:focus,
textarea:focus {
  outline: none;
}

/* フローティングラベル */
.floating-label {
  position: absolute;
  left: 1rem;
  top: -1.2rem;
  background: #000000;
  padding: 0 0.5rem;
  color: #ffffff;
  font-size: 1.4rem;
  transition: color 0.3s ease;
}

/* エラーメッセージ */
.error-message {
  color: #ff4136;
  font-size: 1.2rem;
  margin-top: 0.5rem;
  display: block;
  opacity: 0;
  transition: opacity 0.3s ease;
  position: absolute;
  bottom: -2rem;
  left: 0;
}

.error-message.visible {
  opacity: 1;
}

/* 送信ボタン */
.submit-btn {
  position: relative;
  padding: 1.5rem 4rem;
  background: transparent;
  border: 2px solid #ffffff;
  color: #ffffff;
  font-family: "PixelMplus12", monospace;
  font-size: 1.8rem;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 0 auto;
  display: block;
  min-width: 200px;
}

.submit-btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.submit-btn:hover:not(:disabled) {
  color: #dcb434;
  border-color: #dcb434;
}

.submit-btn:hover:not(:disabled) .dq-cursor {
  opacity: 1;
}

/* レスポンシブデザイン */
@media (max-width: 768px) {
  .contact-container {
    margin: 2rem auto;
    padding: 2rem;
    width: 90%;
  }

  .title-en {
    font-size: 3rem;
  }

  .title-ja {
    font-size: 1.6rem;
    font-weight: normal;
  }

  .form-group {
    margin-left: 0;
  }

  input,
  textarea {
    font-size: 1.4rem;
  }

  .submit-btn {
    width: 100%;
    font-size: 1.6rem;
    padding: 1.2rem;
  }
}
</style>

<script is:inline src="https://www.google.com/recaptcha/api.js?render=6Lf8oXUqAAAAADoVJZdvTAjewaF0t_eHygvM6I53&hl=ja"></script>

<script>
const playSelect = () => {
  const audio = new Audio('/sounds/select.mp3');
  audio.volume = 0.3;
  audio.play();
};

document.addEventListener('DOMContentLoaded', (event) => {
  const form = document.getElementById('contactForm');
  const nameInput = document.getElementById('name');
  const emailInput = document.getElementById('email');
  const messageInput = document.getElementById('message');
  const submitButton = form.querySelector('button[type="submit"]');

  const nameError = document.getElementById('nameError');
  const emailError = document.getElementById('emailError');
  const messageError = document.getElementById('messageError');

  // エラーメッセージの日本語化
  const errorMessages = {
    name: 'なまえを　にゅうりょくして　ください',
    email: 'ただしい　めーるあどれすを　にゅうりょくして　ください',
    message: 'ないようを　にゅうりょくして　ください'
  };

  function validateName() {
    if (nameInput.value.trim() === '') {
      showError(nameInput, nameError, errorMessages.name);
      return false;
    }
    hideError(nameInput, nameError);
    return true;
  }

  function validateEmail() {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(emailInput.value)) {
      showError(emailInput, emailError, errorMessages.email);
      return false;
    }
    hideError(emailInput, emailError);
    return true;
  }

  function validateMessage() {
    if (messageInput.value.trim() === '') {
      showError(messageInput, messageError, errorMessages.message);
      return false;
    }
    hideError(messageInput, messageError);
    return true;
  }

  function showError(input, errorElement, message) {
    input.classList.add('error');
    errorElement.textContent = message;
    errorElement.classList.add('visible');
  }

  function hideError(input, errorElement) {
    input.classList.remove('error');
    errorElement.textContent = '';
    errorElement.classList.remove('visible');
  }

  function validateForm() {
    const isNameValid = validateName();
    const isEmailValid = validateEmail();
    const isMessageValid = validateMessage();
    submitButton.disabled = !(isNameValid && isEmailValid && isMessageValid);
  }

  // フォーム要素のフォーカス時の効果音
  [nameInput, emailInput, messageInput].forEach(element => {
    element.addEventListener('focus', playSelect);
  });

  // バリデーションイベント
  nameInput.addEventListener('input', validateForm);
  emailInput.addEventListener('input', validateForm);
  messageInput.addEventListener('input', validateForm);

  // フォーム送信
  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    if (validateName() && validateEmail() && validateMessage()) {
      try {
        const token = await grecaptcha.execute('6Lf8oXUqAAAAADoVJZdvTAjewaF0t_eHygvM6I53', {action: 'submit'});
        document.getElementById('g-recaptcha-response').value = token;

        const formData = new FormData(form);
        const response = await fetch(form.action, {
          method: 'POST',
          body: formData,
          headers: {
            'Accept': 'application/json'
          }
        });

        if (response.ok) {
          alert('そうだんないようを　おくりました！');
          form.reset();
        } else {
          throw new Error('送信に失敗しました');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('そうしんに　しっぱいしました。\nもういちど　おためしください。');
      }
    }
  });

  // 初期バリデーション
  validateForm();
});
</script>